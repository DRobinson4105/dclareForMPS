name: build and test

on: [push]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    steps:
      - name: "checkout"
        uses: actions/checkout@v1

      - name: "attach git head"
        run: git checkout "${GITHUB_REF#refs/heads/}"

      - name: "setup JDK"
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: "get generic mvg-info"
        uses: ModelingValueGroup/generic-info@master

      - name: "get buildTools"
        uses: ModelingValueGroup/buildTools@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "prepare"
        run:  |
          cat <<EOF >build.properties
          jdk.home.11=$JAVA_HOME
          path.variable.mps_home=./MPS
          EOF

      - name: "determine VERSION_EXTRA"
        run:  |
          branch="${GITHUB_REF#refs/heads/}"
          if [[ "$branch" == master ]]; then
            VERSION_EXTRA=
          elif [[ "$branch" == develop ]]; then
            VERSION_EXTRA="beta$(date +%y%m%d%H%M)"
          else
            VERSION_EXTRA="alpha$(date +%y%m%d%H%M)"
          fi
          echo "::set-env name=VERSION_EXTRA::$VERSION_EXTRA"
          echo "::info::appending '$VERSION_EXTRA' to version"

      - name: "(re)generate some files"
        run:  |
          . <(java -jar ~/buildTools.jar)
          generateAll
          correctEols
          correctHeaders header

      - name: "download dependencies (MPS and jars from pom)"
        run:  |
          . <(java -jar ~/buildTools.jar)
          . project.sh
          getAllDependencies ${{ secrets.GITHUB_TOKEN }} "${{ secrets.SCALEWAY_ACCESS_KEY }}" "${{ secrets.SCALEWAY_SECRET_KEY }}"
          installMps "$mpsDir" "$mpsVersion"

      - name: "runtime: build"
        run:  ant

      - name: "runtime: test"
        run:  ant test

      - name: "runtime: generate javadoc"
        run:  ant javadoc

      - name: "dclare-plugin: build"
        run:  |
          . project.sh
          cp mps_build.xml /tmp/pre
          ant -Dmps_home="$mpsDir" -DversionExtra=$VERSION_EXTRA -f mps_build.xml generate build
          cp mps_build.xml /tmp/pst

          if ! diff -q /tmp/pre /tmp/pst >/dev/null; then
            echo "::info::building changed the ant file: clean sources and build again..."
            diff /tmp/pre /tmp/pst || :
            hexdump -C /tmp/pre | tail | sed 's/^/   PRE /'
            hexdump -C /tmp/pst | tail | sed 's/^/   PST /'
            echo "::info::building changed the ant file: clean sources and build again..."
            ant -Dmps_home="$mpsDir" -DversionExtra=$VERSION_EXTRA -f mps_build.xml cleanSources clean
            ant -Dmps_home="$mpsDir" -DversionExtra=$VERSION_EXTRA -f mps_build.xml generate build
            cp mps_build.xml /tmp/pst2

            if ! diff -q /tmp/pre /tmp/pst2 >/dev/null; then
              diff /tmp/pst /tmp/pst2 || :
              echo "::info::after rebuild the ant file changed again!"
            fi
          fi

      - name: "unzip for actions/upload-artifact"
        run:  |
          # the subsequent actions/upload-artifact step would re-zip the zip, so we unzip and the action below will rezip...
          mkdir build/artifacts/DclareForMPS/DclareForMPS
          cd build/artifacts/DclareForMPS/DclareForMPS
          unzip ../DclareForMPS.zip

      - name: "publish action-artifact zip"
        uses: actions/upload-artifact@v1
        with:
          name: DclareForMPS
          path: build/artifacts/DclareForMPS/DclareForMPS

      - name: "Upload to JetBrains"
        uses: ModelingValueGroup/upload-jetbrains-plugin-action@master
        with:
          file    : "build/artifacts/DclareForMPS/DclareForMPS.zip"
          hubToken: "${{ secrets.JETBRAINS_PUBLISH_TOKEN }}"
          pluginId: "13797"
          trace   : true

      - name: "push changes back to github"
        run:  |
          . <(java -jar ~/buildTools.jar)
          pushBackToGithub "${{ secrets.GITHUB_TOKEN }}" "automation@modelingvalue.com" "adjusted files [by github actions]"

